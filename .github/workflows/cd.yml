name: Home Machine Test - CD Pipeline
on:
  workflow_run:
    workflows: ["Home Machine Test - CI Pipeline"]
    types: [completed]
    branches: [development]
  # Add manual trigger for testing
  workflow_dispatch:

jobs:

  deploy:
    runs-on: [self-hosted, foodie-development]

    steps:
    - name: Check CI success
      run: |
        echo "🔍 CD Pipeline triggered by: ${{ github.event_name }}"
        echo "🔍 Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
        echo "🔍 Branch: ${{ github.event.workflow_run.head_branch }}"
        if [ "${{ github.event.workflow_run.conclusion }}" != "success" ] && [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          echo "❌ CI pipeline did not succeed. Exiting."
          exit 1
        fi
        echo "✅ CI pipeline succeeded or manual trigger. Proceeding with deployment."
        
    - name: Free up memory (t2.micro optimization)
      run: |
        echo "🆓 Optimizing for AWS Free Tier t2.micro..."
        sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches || true
        docker system prune -f || true
    
    - name: Pull Docker Image
      run: sudo docker pull wolf4war/foodie:latest
    
    - name: Delete existing container
      run: sudo docker rm -f foodie || true
    
    - name: Run the Docker image (t2.micro optimized)
      run: sudo docker run -d -p 443:80 --name foodie --memory="800m" --restart=unless-stopped wolf4war/foodie:latest
    
    - name: Test internet connectivity from container
      run: |
        echo "🌐 Testing internet connectivity from container..."
        sudo docker exec foodie curl -f -s --max-time 10 https://api.themealdb.com/json/v1/1/categories.json > /dev/null && echo "✅ Container has internet access" || echo "❌ No internet access"
    
    - name: Wait for application to be ready
      run: |
        echo "Waiting for application to start..."
        timeout=60
        counter=0
        while [ $counter -lt $timeout ]; do
          if curl -f -s http://localhost:443 > /dev/null 2>&1; then
            echo "✅ Application is ready!"
            break
          fi
          sleep 3
          counter=$((counter + 3))
          echo "⏳ Waiting... ($counter/$timeout seconds)"
        done
    
    - name: Clean up old images
      run: |
        docker image prune -f
    
    - name: Display deployment info
      run: |
        echo "✅ Free Tier Deployment successful!"
        echo "🔗 Application URL: http://$(curl -s --max-time 5 http://checkip.amazonaws.com/ || echo 'N/A'):443"
        echo "🆓 Running on AWS Free Tier t2.micro"