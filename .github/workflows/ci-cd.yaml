name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: wolf4war/foodie
  CONTAINER_NAME: foodie-app
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

  build_and_push:
    name: üß± Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest .
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Push Docker Image
        run: |
          docker push ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    name: üöÄ Deploy to EC2
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            echo "üîÑ Pulling latest image..."
            docker pull ${{ env.IMAGE_NAME }}:latest
            
            echo "üõë Stopping existing container..."
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            
            echo "üöÄ Starting new container..."
            docker run -d -p 80:80 --name ${{ env.CONTAINER_NAME }} --restart unless-stopped ${{ env.IMAGE_NAME }}:latest
            
            echo "‚è≥ Waiting for app to start..."
            sleep 15
            
            echo "ü©∫ Health check..."
            if curl -f http://localhost; then
              echo "‚úÖ Deployment successful!"
            else
              echo "‚ùå Health check failed!"
              docker logs ${{ env.CONTAINER_NAME }}
              exit 1
            fi
            
            echo "üßπ Cleaning up old images..."
            docker image prune -f
