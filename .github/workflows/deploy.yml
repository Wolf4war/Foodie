name: Deploy Foodie App

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Build application
      run: npm run build

  deploy:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Free up memory (t2.micro optimization)
      run: |
        echo "🆓 Optimizing for AWS Free Tier t2.micro..."
        sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches || true
        docker system prune -f || true
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies (production only)
      run: npm ci --production --silent
    
    - name: Build application (memory optimized)
      run: |
        NODE_OPTIONS="--max-old-space-size=512" npm run build
    
    - name: Stop existing containers
      run: |
        docker-compose down --remove-orphans || true
    
    - name: Build and start containers (t2.micro optimized)
      run: |
        docker-compose build --parallel 1
        docker-compose up -d
    
    - name: Wait for application to be ready
      run: |
        echo "Waiting for application to start (t2.micro may take longer)..."
        timeout=60
        counter=0
        while [ $counter -lt $timeout ]; do
          if curl -f -s http://localhost:80 > /dev/null 2>&1; then
            echo "✅ Application is ready!"
            break
          fi
          sleep 3
          counter=$((counter + 3))
          echo "⏳ Waiting... ($counter/$timeout seconds)"
        done
        if [ $counter -ge $timeout ]; then
          echo "❌ Timeout waiting for application"
          exit 1
        fi
    
    - name: Clean up for t2.micro
      run: |
        docker image prune -f
        docker container prune -f
        npm cache clean --force || true
    
    - name: Display deployment info
      run: |
        echo "✅ Free Tier Deployment successful!"
        echo "🔗 Application URL: http://$(curl -s --max-time 5 http://checkip.amazonaws.com/ || echo 'N/A')"
        echo "🆓 Running on AWS Free Tier t2.micro"
        echo ""
        echo "� Resource Usage:"
        echo "Memory: $(free -h | awk '/^Mem:/ {print $3"/"$2}')"
        echo "Disk: $(df -h / | awk 'NR==2 {print $5" used"}')"
        echo ""
        echo "🐳 Active containers:"
        docker ps --format "table {{.Names}}\t{{.Status}}" --no-trunc=false