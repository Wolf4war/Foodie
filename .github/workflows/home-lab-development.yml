name: Home lab development

on:
  push:
    branches: [ "development" ]
  pull_request:
    branches: [ "development" ]
  # Manual trigger for testing
  workflow_dispatch:

jobs:
  # CI Job - Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint || echo "Linting skipped - no lint script found"
    
    - name: Run tests
      run: npm test || echo "Tests skipped - no test script found"
    
    - name: Build application
      run: npm run build
    
    - name: Login to DockerHub
      env:
        DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      
    - name: Build and Push Docker Image
      run: |
        # Build with development tag
        docker build -t wolf4war/foodie:development .
        docker tag wolf4war/foodie:development wolf4war/foodie:latest
        docker push wolf4war/foodie:development
        docker push wolf4war/foodie:latest
        echo "✅ Docker image pushed successfully"

  # CD Job - Deploy to Home Lab
  deploy-to-homelab:
    needs: build-and-test
    runs-on: [self-hosted, foodie-development]
    if: ${{ github.ref == 'refs/heads/development' }}
    
    steps:
    - name: 🏠 Home Lab Deployment Started
      run: |
        echo "🏠 Starting Home Lab Development deployment..."
        echo "📍 Server: $(hostname)"
        echo "🌐 IP: $(curl -s --max-time 5 http://checkip.amazonaws.com/ || echo 'N/A')"
        echo "🔄 Deploying Foodie application..."
        
    - name: Free up memory (t2.micro optimization)
      run: |
        echo "🆓 Optimizing for AWS Free Tier t2.micro..."
        sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches || true
        docker system prune -f || true
    
    - name: Pull Latest Docker Image
      run: |
        echo "📥 Pulling latest Foodie Docker image..."
        sudo docker pull wolf4war/foodie:latest
        echo "✅ Docker image pulled successfully"
    
    - name: Stop and Remove Existing Container
      run: |
        echo "🛑 Stopping existing Foodie container..."
        sudo docker rm -f foodie || echo "No existing container to remove"
    
    - name: Deploy Foodie Application
      run: |
        echo "🚀 Deploying Foodie application on port 443..."
        sudo docker run -d \
          -p 443:80 \
          --name foodie \
          --memory="800m" \
          --restart=unless-stopped \
          wolf4war/foodie:latest
        echo "✅ Foodie container started successfully"
    
    - name: Test Internet Connectivity
      run: |
        echo "🌐 Testing internet connectivity from container..."
        sleep 5  # Wait for container to fully start
        if sudo docker exec foodie curl -f -s --max-time 10 https://api.themealdb.com/json/v1/1/categories.json > /dev/null; then
          echo "✅ Container has internet access - TheMealDB API reachable"
        else
          echo "❌ No internet access from container"
          echo "🔍 Container logs:"
          sudo docker logs foodie --tail 10
        fi
    
    - name: Wait for Application Ready
      run: |
        echo "⏳ Waiting for Foodie application to be ready..."
        timeout=60
        counter=0
        while [ $counter -lt $timeout ]; do
          if curl -f -s http://localhost:443 > /dev/null 2>&1; then
            echo "✅ Foodie application is ready!"
            break
          fi
          sleep 3
          counter=$((counter + 3))
          echo "⏳ Waiting... ($counter/$timeout seconds)"
        done
        
        if [ $counter -ge $timeout ]; then
          echo "❌ Application did not become ready within $timeout seconds"
          echo "🔍 Container logs:"
          sudo docker logs foodie --tail 20
        fi
    
    - name: Application Health Check
      run: |
        echo "🏥 Performing application health check..."
        PUBLIC_IP=$(curl -s --max-time 5 http://checkip.amazonaws.com/ || echo 'N/A')
        echo "🔗 Application URL: http://$PUBLIC_IP:443"
        
        # Test if the app responds
        if curl -f -s http://localhost:443 > /dev/null; then
          echo "✅ Application is responding on port 443"
        else
          echo "❌ Application is not responding"
        fi
        
        # Show container status
        echo "📊 Container Status:"
        sudo docker ps -f name=foodie --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
    - name: Clean Up Old Images
      run: |
        echo "🧹 Cleaning up old Docker images..."
        docker image prune -f || true
    
    - name: 🎉 Deployment Summary
      run: |
        PUBLIC_IP=$(curl -s --max-time 5 http://checkip.amazonaws.com/ || echo 'N/A')
        echo "════════════════════════════════════════"
        echo "🎉 HOME LAB DEPLOYMENT COMPLETED!"
        echo "════════════════════════════════════════"
        echo "🏠 Server: foodie-development"
        echo "🔗 Application URL: http://$PUBLIC_IP:443"
        echo "🐳 Container: foodie (wolf4war/foodie:latest)"
        echo "💾 Memory Limit: 800MB (AWS Free Tier optimized)"
        echo "🆓 Running on AWS Free Tier t2.micro"
        echo "════════════════════════════════════════"
        echo "✅ Ready for testing at: http://$PUBLIC_IP:443"